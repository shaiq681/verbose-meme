{
  
    
        "post0": {
            "title": "Objective",
            "content": "Metrics . Positive Score: This score is calculated by assigning the value of +1 for each word if found in the Positive Dictionary and then adding up all the values. | Negative Score: This score is calculated by assigning the value of -1 for each word if found in the Negative Dictionary and then adding up all the values. We multiply the score with -1 so that the score is a positive number. | Polarity Score: $ frac{( text{Positive Score} – text{Negative Score})}{(( text{Positive Score + Negative Score} ) + 0.000001)}$ | Subjective Score: $ frac{ text{(Positive Score + Negative Score)}}{ text{((Total Words after cleaning) + 0.000001)}}$ | Average Sentece Length: $ frac{ text{No. of Words}}{ text{Np. of Sentences}}$ | % Complex Words: $ frac{ text{The number of complex words}}{ text{The number of words }}$ | Fog Index: $0.4 * text{(Average Sentence Length + % Complex words)}$ | Syllable Count: Personal Pronouns are considered for counting. Special care is taken so that the country name US is not included in the list. | . Libraries . import sys, os, glob import re import numpy as np import pandas as pd import bs4 as bs import requests import spacy # NLP from spacy_syllables import SpacySyllables # Syllables from pathlib import Path from string import punctuation . Custom NLP Model . nlp = spacy.load(&#39;en_core_web_sm&#39;) # Custom Model nlp.add_pipe(&#39;syllables&#39;, after=&#39;tagger&#39;) # Model for Syllable identification . &lt;spacy_syllables.SpacySyllables at 0x20bb351fc88&gt; . Constants . TEXT_LIMIT = 1_000_000 # Default SpaCy limit URLArchive = &quot;https://www.sec.gov/Archives/&quot; CONSTANT = 0.000_001 . Constant Factory . Create List of the following Constants: Positive Words | Negative Words | Stop Words(Auditiors, Currencies,Dates and Numbers,Generic, Generic Long, Geographic, Names) | Constraining Words | Uncertainty Words | . | . StopWords . Scraped Stopwords from the Official Source | Saved Words in the folder SentinemtWordList | Collected positive and negative words for creating a StopWords Corpus. | Used Similar approach to create a corpus of constraint and uncertainty words. | . path = sorted(Path(&#39;.&#39;).glob(f&quot;**/*SentimentWordList*&quot;)) # Stop Words file Path sentiment_file = Path.cwd()/Path(path[0]) negs = pd.read_excel(io=sentiment_file, sheet_name=&#39;Negative&#39;,header=None).iloc[:,0].values pos = pd.read_excel(io=sentiment_file, sheet_name=&#39;Positive&#39;,header=None).iloc[:,0].values neg_words = [word.lower() for word in negs] pos_words = [word.lower() for word in pos] . def createStopWords(): &quot;&quot;&quot;Function to fetch Stopwords from various stop-words text files as provided in reference. &quot;&quot;&quot; stop_words = [] pathStopWords = sorted(Path(&#39;.&#39;).glob(f&quot;**/stopwords*.txt&quot;)) # Stop Words file Path if pathStopWords: for filePath in pathStopWords: fullPath = Path.cwd()/Path(filePath) with open(fullPath, mode=&#39;r&#39;, encoding=&#39;utf8&#39;, errors=&#39;ignore&#39;) as file: TEXT = file.read() fileStopWOrds = [line.split(&#39;|&#39;)[0] for line in TEXT.split(&#39; n&#39;)] stop_words.extend(fileStopWOrds) else: raise FileNotFoundError(f&#39;StopWords related files are not in the {Path.cwd()} and its subdirectories&#39;) return(stop_words) . stopWordList = createStopWords() # Collect Stop words from all files stopWordList = list(map(lambda x: x.lower(), stopWordList)) nlp.Defaults.stop_words -= nlp.Defaults.stop_words # Remove Default Stop Words nlp.Defaults.stop_words = {stopword for stopword in stopWordList if stopword !=&quot;&quot;} # Add custom stop words . path_constraint = sorted(Path(&#39;.&#39;).glob(f&quot;**/*constraining*&quot;)) # Stop Words file Path constraining_file = Path.cwd()/Path(path_constraint[0]) constraints = pd.read_excel(io=constraining_file, sheet_name=0,header=0).iloc[:,0].values constraints = [w.lower() for w in constraints] # Create Uncertainty List path_uncertainty = sorted(Path(&#39;.&#39;).glob(f&quot;**/*uncertainty*&quot;)) # Stop Words file Path uncertainty_file = Path.cwd()/Path(path_uncertainty[0]) uncertainty = pd.read_excel(io=uncertainty_file, sheet_name=0,header=0).iloc[:,0].values uncertainty = [w.lower() for w in uncertainty] . Helper Functions . Performs Data cleaning, formating and NLP tasks. | . def replaceHTMLTags(text): &quot;Function that uses Regex to create word tokens.&quot; text = re.sub(&quot;&lt;[^&gt;]*&gt;&quot;, &quot;&quot;, text) # Remove HTML Tags text = re.sub(r&#39;[^ w s]&#39;,&quot;&quot;, text) # Remove Punctuations return(text) . def save_text(url): &quot;&quot;&quot;Function to save the results of the scraped text in &#39;raw&#39; directory.&quot;&quot;&quot; file_name = Path.cwd()/Path(&quot;raw/&quot;+url.split(&#39;/&#39;)[-1]) # Save .txt file in raw folder try: data = requests.get(url, timeout = 10) # Standard Timeout according to SEC.gov response = data.status_code if response &gt;200: return(url) else: data = data.content.decode(&#39;utf-8&#39;) with open(file_name, &#39;w&#39;) as f: f.write(data) except: pass # raise ProxyError(&#39;Unable to connect!&#39;) . def read_from_txt(secfname): &quot;&quot;&quot; Function to read from the text file related to SECFNAME. Params: secfname: str, SECFNAME column value. &quot;&quot;&quot; text_file = secfname.split(&#39;/&#39;)[-1] file_path = sorted(Path(&#39;.&#39;).glob(f&quot;**/{text_file}&quot;)) with open(file_path[0]) as f: TEXT = f.read() return(TEXT) . def get_sentiments(TEXT): &quot;&quot;&quot;Function to get various count in a text. Params: TEXT: str, Input text Returns: - List[count_pos_sents,count_neg_sents, total_complex_words, total_words, total_sents, total_syllables, total_const, total_uncertain]: count_pos_sents: int, No. of Positive words in the SEC Filing count_neg_sents: int, No. of Negative words in the SEC Filing total_complex_words: int, No of Complex words in the SEC Filing total_words: int, Total words post cleanup in the SEC Filing total_sents : int, Total sentences in the SEC Filing total_syllables: int, Total No of complex Syllables in the SEC Filing total_const: int, Total No of Constraint words total_uncertain: int, Total no. of Uncertain words &quot;&quot;&quot; print(&quot;startint sentiment analysis...&quot;) if not TEXT: return([CONSTANT]*7) # To avoid ZeroDivisionError else: if len(TEXT)&lt; TEXT_LIMIT: doc = nlp(TEXT) else: nlp.max_length = len(TEXT) +1 doc = nlp(TEXT, disable = [&#39;ner&#39;]) print(&quot;document loaded...&quot;) count_pos_sents = 0 count_neg_sents = 0 total_complex_words = 0 total_words = 0 total_const = 0 total_uncertain = 0 total_sents = 0 for token in doc: # Positive Word Count if (token.lower_ in pos_words): count_pos_sents += 1 # Negative Word Count if (token.lower_ in neg_words): count_neg_sents +=1 # Complex Word Count if (token._.syllables_count is not None and token._.syllables_count &gt;2): total_complex_words +=1 # Total Words if (token.lower_ not in nlp.Defaults.stop_words): total_words +=1 # Count Constraints if (token.lower_ in constraints): total_const +=1 # Count uncertainty if (token.lower_ in uncertainty): total_uncertain +=1 # Total Sentences total_sents = sum(1 for sent in doc.sents) return([count_pos_sents,count_neg_sents, total_complex_words, total_words, total_sents, total_const, total_uncertain]) . Data Loading . data = pd.read_excel(&#39;cik_list.xlsx&#39;, sheet_name=&#39;cik_list_ajay&#39;, header=0) . Text Mining Pipeline . Reads the TEXT file into the SpaCy&#39;s vectorized format. | Removes possible HTML related tags and punctuations. | Performs Sentiment analysis: calculates, positive, negative and polarity score | Calculates Complex Word count | Calculates Total Word count | Calculates Uncertainty count | Calculates Constraining count. | Retuns results as pandas columns | . text_mining_pipeline = lambda secfname: get_sentiments(replaceHTMLTags(read_from_txt(secfname))) . # Uncertainity Score and Constraining Score data[[&#39;positive_score&#39;,&#39;negative_score&#39;,&#39;complex_word_count&#39;,&#39;word_count&#39;,&#39;sentence_length&#39;, &#39;uncertainty_score&#39;, &#39;constraining_score&#39;]] = data.apply(lambda x: text_mining_pipeline(x[&#39;SECFNAME&#39;]), axis=1).apply(pd.Series) . startint sentiment analysis... document loaded... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... document loaded... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... document loaded... startint sentiment analysis... document loaded... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... document loaded... startint sentiment analysis... document loaded... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... document loaded... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... document loaded... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... startint sentiment analysis... . data[&#39;polarity_score&#39;] = data.apply(lambda row: (row[&#39;positive_score&#39;] - row[&#39;negative_score&#39;])/(row[&#39;positive_score&#39;] + row[&#39;negative_score&#39;]+ CONSTANT) , axis=1) . data[&#39;average_sentence_length&#39;] = data.apply(lambda row: row[&#39;word_count&#39;]/row[&#39;sentence_length&#39;], axis=1) . data[&#39;percentage_of_complex_words&#39;] = data.apply (lambda row: (row[&#39;complex_word_count&#39;]/row[&#39;word_count&#39;])*100, axis=1) . data[&#39;fog_index&#39;] = 0.4*(data[&#39;average_sentence_length&#39;] + data[&#39;percentage_of_complex_words&#39;]) . data[&#39;positive_word_proportion&#39;] = data.apply(lambda r: r[&#39;positive_score&#39;]/r[&#39;word_count&#39;], axis=1) . data[&#39;negative_word_proportion&#39;] = data.apply(lambda r: r[&#39;negative_score&#39;]/r[&#39;word_count&#39;], axis=1) . data[&#39;uncertainty_word_proportion&#39;] = data.apply(lambda r: r[&#39;uncertainty_score&#39;]/ r[&#39;word_count&#39;] ,axis=1) . data[&#39;constraining_word_proportion&#39;] = data.apply(lambda r: r[&#39;constraining_score&#39;]/ r[&#39;word_count&#39;] ,axis=1) . data[&#39;constraining_words_whole_report&#39;] = np.sum(data.constraining_score) # Broadcasting the total constraining score of all the docs. . Data Saving . data.to_csv(path_or_buf=Path.cwd()/Path(&#39;result.csv&#39;), columns=[&#39;CIK&#39;, &#39;CONAME&#39;, &#39;FYRMO&#39;, &#39;FDATE&#39;, &#39;FORM&#39;, &#39;SECFNAME&#39;, &#39;positive_score&#39;, &#39;negative_score&#39;, &#39;polarity_score&#39;, &#39;average_sentence_length&#39;, &#39;percentage_of_complex_words&#39;, &#39;fog_index&#39;, &#39;complex_word_count&#39;, &#39;word_count&#39;, &#39;uncertainty_score&#39;, &#39;constraining_score&#39;, &#39;positive_word_proportion&#39;, &#39;negative_word_proportion&#39;, &#39;uncertainty_word_proportion&#39;, &#39;constraining_word_proportion&#39;, &#39;constraining_words_whole_report&#39;], index=False) .",
            "url": "https://shaiq681.github.io/verbose-meme/2020/06/13/SEC-Report-Sentiment-Analysis.html",
            "relUrl": "/2020/06/13/SEC-Report-Sentiment-Analysis.html",
            "date": " • Jun 13, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://shaiq681.github.io/verbose-meme/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shaiq681.github.io/verbose-meme/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://shaiq681.github.io/verbose-meme/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shaiq681.github.io/verbose-meme/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}